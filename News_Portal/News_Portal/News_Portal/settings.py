"""
Django settings for News_Portal project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

import logging #для логирования

logger = logging.getLogger('django') # для логирования


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-o0ee__ghgt-2g*qh51@!_=m38k9lgwe@oekgp8-p^g(m5p0-ej'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news_p.apps.NewsPConfig',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'fpages',
    'templates',
    'static',
    'django_filters',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_apscheduler',
]

ACCOUNT_FORMS = {'signup': 'news_p.forms.BasicSignupForm'}

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',#для локализации
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'news_p.middlewares.TimezoneMiddleware',
]

ROOT_URLCONF = 'News_Portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/news/profile/'
LOGOUT_REDIRECT_URL = '/accounts/login/'
#Для подтверждения почты при регистрации
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_AUTHENTICATION_METHOD = "username_email"

WSGI_APPLICATION = 'News_Portal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru'#код для перевода на этот язык будет переводиться
LANGUAGES = [
    ('en-us', 'English'),
    ('ru', 'Русский')
]

TIME_ZONE = 'UTC'

USE_I18N = True #Интернационализация для локализации

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

SITE_URL = 'http://127.0.0.1:8000'

ADMINS = [
    ('sergey_admin', 'pit9305@yandex.ru'),
]

EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'soobsheny.rassylka'
EMAIL_HOST_PASSWORD = 'imdhsurxppggvwrd'
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = 'soobsheny.rassylka@yandex.ru'
SERVER_EMAIL = 'soobsheny.rassylka@yandex.ru' #С этой почты отправляются сообщения админам

# формат даты, которую будет воспринимать наш задачник (вспоминаем модуль по фильтрам)
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше,
# но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'style': '{',
    #Форматтеры для форматирования(то как будет выводиться)
    'formatters': {
        'simple': {
            'format': '%(asctime)s %(levelname)s %(message)s',
            'datefmt': "%d.%m.%Y %H-%M-%S"
        },
        'simple_warning': {
            'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s',
            'datefmt': "%d.%m.%Y %H-%M-%S"
        },
        'simple_error': {
            'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s %(exc_info)s',
            'datefmt': "%d.%m.%Y %H-%M-%S"
        },
        'general_log': {
            'format': '%(asctime)s %(levelname)s %(module) s%(message)s',
            'datefmt': "%d.%m.%Y %H-%M-%S"
        },
        'errors_log': {
            'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s %(exc_info)s',
            'datefmt': "%d.%m.%Y %H-%M-%S"
        },
        'security_log': {
            'format': '%(asctime)s %(levelname)s %(module) s%(message)s',
            'datefmt': "%d.%m.%Y %H-%M-%S"
        },
        'email': {
            'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s',
            'datefmt': "%d.%m.%Y %H-%M-%S"
        }
        
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    #Обработчики
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'console_warning': {
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple_warning'
        },
        'console_error': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',#класс обработчика, который выводит информацию в консоль
            'formatter': 'simple_error'
        },

        'general': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler', #класс обработчика для записи в файл
            'filename': 'logs/general.log',#путь и имя файла
            'formatter': 'general_log'
        },

        'errors': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'logs/errors.log',
            'formatter': 'errors_log',
        },

        'security': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/security.log',
            'formatter': 'security_log',
        },

        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'email'
        },
    },

    #Регистраторы(Логгеры)
    'loggers': {
        #Регистратор верхнего уровня
        'django': {
            'handlers': ['console', 'console_warning', 'console_error', 'general'],#указать обработчики
            'propagate': True #Надо ставить True, что бы передавались события в уровень выше
        },
        #Регистратор обработки запроса
        'django.request': {
            'handlers': ['errors', 'mail_admins'],
            'propagate': True #если False, то они будут отображаться только в одном регистраторе
        },
        #Регистратор запуска сервера
        'django.server': {
            'handlers': ['errors', 'mail_admins'],
            'propagate': True
        },
        #Регистратор взаимодействия с шаблонами
        'django.template': {
            'handlers': ['errors'],
            'propagate': True
        },
        #Регистратор взаимодействия с БД
        'django.db.backends': {
            'handlers': ['errors'],
            'propagate': True
        },
        #Регистратор нарушения безопасности
        'django.security': {
            'handlers': ['security'],
            'propagate': True
        },
    }
}